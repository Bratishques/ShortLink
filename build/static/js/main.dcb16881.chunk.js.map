{"version":3,"sources":["hooks/http.hook.js","context/AuthContext.js","pages/LinkPages.js","pages/CreatePage.js","components/LinkCard.js","pages/DetailPage.js","pages/AuthPage.js","components/Navbar.js","App.js","hooks/auth.hook.js","router.js","serviceWorker.js","index.js"],"names":["useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","AuthContext","createContext","token","userId","login","noop","logout","isAuthenticated","LinksPage","links","setLinks","useContext","fetchLinks","authorization","fetched","useEffect","map","obj","to","CreatePage","history","useHistory","auth","link","setLink","pressHandler","e","key","from","console","log","push","_id","alert","className","id","type","name","value","onChange","target","onKeyPress","LinkCard","href","DetailPage","linkId","useParams","getLink","AuthPage","email","password","form","setForm","changeHandler","event","registerHandler","loginHandler","onClick","disabled","Navbar","preventDefault","App","setToken","ready","setReady","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","exact","useRoutes","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.dcb16881.chunk.js","sourcesContent":["import {useCallback, useState} from \"react\";\r\nexport  const useHttp = () => {\r\n    const [loading,setLoading] = useState(false)\r\n    const [error,setError] = useState(null)\r\n    const request = useCallback(async (url, method = \"get\", body=null, headers={}) => {\r\n        setLoading(true)\r\n        try {\r\n            if(body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = \"application/json\"\r\n            }\r\n           const response = await fetch(url, {method,body,headers})\r\n            const data = await response.json()\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message)\r\n            }\r\n\r\n            setLoading(false)\r\n\r\n            return data\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    },[])\r\n    return {loading, request, error}\r\n}","import {createContext} from \"react\"\r\n\r\nconst noop = () => {}\r\nexport const AuthContext = createContext({\r\n    token:null,\r\n    userId: null,\r\n    login: noop(),\r\n    logout: noop(),\r\n    isAuthenticated: false\r\n})","import React, {useCallback, useContext, useEffect, useState} from 'react';\r\nimport {useHttp} from \"../hooks/http.hook\"\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nexport const LinksPage = () => {\r\n    const [links,setLinks] = useState([])\r\n    const {loading, request} = useHttp()\r\n    const {token} = useContext(AuthContext)\r\n    const fetchLinks = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(\"/api/link\", \"GET\", null, {authorization: `Bearer ${token}`})\r\n            setLinks(fetched)\r\n        } catch (e) {\r\n            \r\n        }\r\n    },[token,request])\r\n\r\n    useEffect(()=>{\r\n        fetchLinks()\r\n        },[fetchLinks]\r\n    )\r\n    return (\r\n        <div>\r\n            <h1>Link page</h1>\r\n           <ul> {links.map(obj => {\r\n               return  <li>{obj.to}</li>\r\n            })}</ul>\r\n        </div>\r\n    )\r\n}","import React, {useContext, useState} from 'react';\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\n\r\nexport const CreatePage = () => {\r\n    const history = useHistory()\r\n    const auth = useContext(AuthContext)\r\n    const {request} = useHttp()\r\n    const [link,setLink] = useState()\r\n\r\n\r\n    const pressHandler = async (e) => {\r\n        if (e.key === \"Enter\") {\r\n            try {\r\n                const data = await request(\"/api/link/generate\", \"POST\", {from:link}, {authorization: `Bearer ${auth.token}`})\r\n\r\n\r\n\r\n\r\n                console.log(data)\r\n                history.push(`detail/${data.link._id}`)\r\n            }\r\n\r\n            catch (e) {\r\n                auth.logout()\r\n                alert(\"Сессия истекла\")\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div className={\"create-wrap\"}>\r\n            <h1>Create page</h1>\r\n            <div className={\"create-form\"}>\r\n                <div className=\"create_form\">Ссылка: <input\r\n                    id={\"email\"}\r\n                    type={\"text\"}\r\n                    name={\"email\"}\r\n                    value = {link}\r\n                    onChange={e => setLink(e.target.value)}\r\n                    onKeyPress={pressHandler}\r\n                /> </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport  const LinkCard= ({link}) => {\r\n    return (\r\n        <div>\r\n            <h2>Cсылка</h2>\r\n            <p>Ваша ссылка: <a href={link.to}>{link.to}</a></p>\r\n        </div>\r\n    )\r\n}","import React, {useCallback, useContext, useState, useEffect} from 'react';\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {useParams} from \"react-router-dom\"\r\nimport {LinkCard} from \"../components/LinkCard\";\r\n\r\n\r\n\r\n\r\nexport const DetailPage = () => {\r\n    const [link,setLink] = useState(null)\r\n    const {token} = useContext(AuthContext)\r\n    const {request, loading} = useHttp()\r\n    const linkId = useParams().id\r\n\r\n    const getLink = useCallback(async  () => {\r\n        try {\r\n          const fetched =  await request (`/api/link/${linkId}`, \"GET\", null, {authorization: `Bearer ${token}`})\r\n            setLink(fetched)\r\n        } catch (e) {\r\n\r\n        }\r\n    }, [linkId,token,request])\r\n\r\n    useEffect(() => {\r\n        getLink()\r\n    },[getLink])\r\n\r\n    if (loading) {\r\n        return  null\r\n    }\r\n    return (\r\n        <div>\r\n            {!loading && link ? <LinkCard link={link}/> : null}\r\n\r\n        </div>\r\n    )\r\n}","import React, {useContext, useEffect, useState} from 'react';\r\nimport {useHttp} from \"../hooks/http.hook\"\r\nimport \"./styles.css\"\r\nimport {AuthContext} from \"../context/AuthContext\";\r\n\r\nexport const AuthPage = () => {\r\n    const auth = useContext(AuthContext)\r\n    const {loading, error, request} = useHttp()\r\n    const [form,setForm] = useState({\r\n        email:\"\", password:\"\"\r\n    })\r\n    const changeHandler = event => {\r\n        setForm({...form, [event.target.name]:event.target.value})\r\n    }\r\n    useEffect(() => {\r\n        if (error) {\r\n            console.log(error)\r\n            alert(error)\r\n        }\r\n    }, [error])\r\n    const registerHandler = async () => {\r\n        try {\r\n            const data = await request(\"/api/auth/register\", \"POST\", {...form})\r\n            console.log(data)\r\n        } catch (e) {\r\n            \r\n        }\r\n    }\r\n\r\n    const loginHandler = async () => {\r\n        try {\r\n            const data = await request(\"/api/auth/login\", \"POST\", {...form})\r\n            auth.login(data.token, data.userId)\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Auth page</h2>\r\n            <div className=\"auth-forms\">\r\n                <div className=\"auth_form\">Email: <input\r\n                id={\"email\"}\r\n                type={\"text\"}\r\n                name={\"email\"}\r\n                onChange={changeHandler}\r\n                /></div>\r\n                <div className=\"auth_form\">Password: <input\r\n                    id=\"password\"\r\n                    type={\"password\"}\r\n                    name={\"password\"}\r\n                    onChange={changeHandler}\r\n                /></div>\r\n            </div>\r\n            <div className=\"auth-buttons\">\r\n                <button onClick={loginHandler} disabled={loading}>Войти</button>\r\n                <button onClick={registerHandler} disabled={loading}>Регистрация</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useContext} from \"react\";\r\nimport {Link} from \"react-router-dom\"\r\nimport {AuthContext} from \"../context/AuthContext\";\r\n\r\nexport const Navbar = () => {\r\n    const auth = useContext(AuthContext)\r\n\r\n    const LogoutHandler = (event) => {\r\n      event.preventDefault()\r\n        auth.logout()\r\n\r\n    }\r\n    return (\r\n        <div className={\"navbar-wrap\"}>\r\n        <div className={\"navbar__logo\"}>\r\n            LOGOGOL\r\n        </div>\r\n            <div className={\"navbar-links\"}>\r\n                <Link to=\"/create\">Create Link</Link>\r\n                <Link to=\"/links\">Links</Link>\r\n                <a href={\"/\"} onClick={LogoutHandler}>Logout</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport {useRoutes} from \"./router\";\nimport {BrowserRouter} from \"react-router-dom\"\nimport {useAuth} from \"./hooks/auth.hook\";\nimport {AuthContext} from \"./context/AuthContext\";\n\n\nfunction App() {\n\n    const {token,login,logout,userId, ready} = useAuth()\n    const isAuthenticated = !!token\n    const routes = useRoutes(isAuthenticated)\n  return (\n    <div>\n        <AuthContext.Provider value={{token, login,logout,userId,isAuthenticated}}>\n      <BrowserRouter>\n      {routes}\n      </BrowserRouter>\n        </AuthContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import {useCallback, useState, useEffect} from \"react\";\r\n\r\nconst storageName = \"userData\"\r\nexport const useAuth = () => {\r\n    const [token,setToken] = useState(null)\r\n    const [ready,setReady] = useState(false)\r\n    const [userId, setUserId] = useState(null)\r\n\r\n    const login = useCallback((jwtToken,id) => {\r\n        setToken(jwtToken)\r\n        setUserId(id)\r\n        localStorage.setItem(storageName,JSON.stringify({userId:id, token:jwtToken}))\r\n    },[])\r\n\r\n    const logout = useCallback(() => {\r\n        setToken(null)\r\n        setUserId(null)\r\n        localStorage.removeItem(storageName)\r\n    },[])\r\n\r\n    useEffect(()=> {\r\n\r\n        const data = JSON.parse(localStorage.getItem(storageName))\r\n\r\n        if (data && data.token) {\r\n            login(data.token, data.userId)\r\n        }\r\n        setReady(true)\r\n    },[login])\r\n\r\n    return{login, logout, token, userId, ready}\r\n}","import React from 'react';\r\nimport {Switch, Route, Redirect} from \"react-router-dom\"\r\nimport {LinksPage} from \"./pages/LinkPages\";\r\nimport {CreatePage} from \"./pages/CreatePage\";\r\nimport {DetailPage} from \"./pages/DetailPage\";\r\nimport {AuthPage} from \"./pages/AuthPage\";\r\nimport {Navbar} from \"./components/Navbar\";\r\n\r\n\r\n\r\nexport const useRoutes = isAuthenticated => {\r\n    if (isAuthenticated) {\r\n        return (\r\n            <>\r\n            <Navbar></Navbar>\r\n            <Switch>\r\n                <Route path=\"/links\" exact>\r\n                    <LinksPage/>\r\n                </Route>\r\n                <Route path=\"/create\" exact>\r\n                    <CreatePage/>\r\n                </Route>\r\n                <Route path=\"/detail/:id\" exact>\r\n                    <DetailPage/>\r\n                </Route>\r\n                <Redirect to={\"/create\"}/>\r\n            </Switch>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return  (\r\n        <Switch>\r\n        <Route path=\"/\" exact>\r\n            <AuthPage/>\r\n        </Route>\r\n    <Redirect to={\"/\"}/>\r\n        </Switch>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}